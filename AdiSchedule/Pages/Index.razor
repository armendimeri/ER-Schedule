@page "/"
@using Radzen
@using Radzen.Blazor
@using AdiSchedule
@using Syncfusion.Blazor.Schedule
<PageTitle>Orari Adit</PageTitle>
<h1>Dr. Adrijan</h1>
<div>
<Syncfusion.Blazor.Schedule.SfSchedule FirstDayOfWeek="1" Height="90vh" EnableAutoRowHeight=true TValue="Appointment">
    <Syncfusion.Blazor.Schedule.ScheduleEventSettings AllowEditing=false AllowDeleting=false AllowAdding=false  DataSource="MySchedule"></Syncfusion.Blazor.Schedule.ScheduleEventSettings>
    <ScheduleViews>
        <ScheduleView Option="View.Month" MaxEventsPerRow="2"></ScheduleView>
           
    </ScheduleViews>
</Syncfusion.Blazor.Schedule.SfSchedule>
</div>
@*<RadzenScheduler style="height: 768px;" TItem="Appointment" Data=@GetSchedule() StartProperty="Start" EndProperty="End"
        TextProperty="Text" SelectedIndex="2">
        <RadzenDayView />
        <RadzenWeekView />
        <RadzenMonthView />
    </RadzenScheduler>*@
<style>.e-schedule .e-month-view .e-appointment{
height:50px !important}

        .e-schedule .e-month-view .e-appointment .e-appointment-details .e-subject
        {
        font-size:12px !important;
            
        }

        .e-schedule .e-month-view .e-appointment .e-appointment-details {
            display:block !important;
            padding: 5px 0px 0px 5px !important;
        }
        </style>
@code {
    protected override Task OnInitializedAsync()
    {
        MySchedule = GetSchedule();
        return base.OnInitializedAsync();
    }
    private List<Appointment> MySchedule { get; set; }

    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    private List<Appointment> GetSchedule()
    {
        List<Appointment> list = new List<Appointment>();

        DateTime startDate = new DateTime(2022, 08, 15);

        for (int i = 0;  i < 100; i++)
        {

            var dayOne = startDate.AddDays(1);

            var dayTwo = startDate.AddDays(2);

            var dayThree = startDate.AddDays(3);

            var dayFour = startDate.AddDays(4);

            var startTime1 = new DateTime(dayOne.Year, dayOne.Month, dayOne.Day, 7, 0, 0);
            var endTime1 = new DateTime(dayOne.Year, dayOne.Month, dayOne.Day, 19, 0, 0);
            list.Add(new Appointment { Start = dayOne, End = dayOne, Text = "LIRE", Subject = "LIRË", StartTime = startTime1, EndTime = endTime1 });

            
            var startTime2 = new DateTime(dayTwo.Year, dayTwo.Month, dayTwo.Day, 7, 0, 0);
            var endTime2 = new DateTime(dayTwo.Year, dayTwo.Month, dayTwo.Day, 19, 0, 0);
            list.Add(new Appointment { Start = dayTwo, End = dayTwo, Text = "MENGJES", Subject = "SABA", StartTime = startTime2, EndTime = endTime2 });

           
            var startTime3 = new DateTime(dayThree.Year, dayThree.Month, dayThree.Day, 19, 0, 0);

            

            var endTime3 = new DateTime(dayFour.Year, dayFour.Month, dayFour.Day, 7, 0, 0);
            list.Add(new Appointment { Start = dayThree, End = dayThree, Text = "NATEN", Subject = "NATËN", StartTime = startTime3, EndTime = endTime3 });

            startDate = startDate.AddDays(4);
        }

        return list;
    }

    IList<Appointment> appointments = new List<Appointment>
    {
        new Appointment { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Text = "E LIRE" },
        new Appointment { Start = DateTime.Today.AddDays(-11), End = DateTime.Today.AddDays(-10), Text = "MENGJES" },
        new Appointment { Start = DateTime.Today.AddDays(-10), End = DateTime.Today.AddDays(-8), Text = "NATEN" },
    };

    void OnSlotRender(SchedulerSlotRenderEventArgs args) 
    {
        if (args is null)
        {
            throw new ArgumentNullException(nameof(args));
        }

        Appointment data = new Appointment();
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

  

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }
}